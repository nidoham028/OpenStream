// Generated by view binder compiler. Do not edit!
package com.nidoham.openstream.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.nidoham.openstream.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivitySearchBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final TextView correctSuggestion;

  @NonNull
  public final TextView emptyStateDescription;

  @NonNull
  public final TextView emptyStateTitle;

  @NonNull
  public final LinearLayout emptyStateView;

  @NonNull
  public final EditText etSearch;

  @NonNull
  public final ImageView ivBack;

  @NonNull
  public final ImageView ivClear;

  @NonNull
  public final ProgressBar loadingProgressBar;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final RecyclerView suggestions;

  @NonNull
  public final Toolbar toolbar;

  private ActivitySearchBinding(@NonNull RelativeLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull TextView correctSuggestion,
      @NonNull TextView emptyStateDescription, @NonNull TextView emptyStateTitle,
      @NonNull LinearLayout emptyStateView, @NonNull EditText etSearch, @NonNull ImageView ivBack,
      @NonNull ImageView ivClear, @NonNull ProgressBar loadingProgressBar,
      @NonNull RecyclerView recyclerView, @NonNull RecyclerView suggestions,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.correctSuggestion = correctSuggestion;
    this.emptyStateDescription = emptyStateDescription;
    this.emptyStateTitle = emptyStateTitle;
    this.emptyStateView = emptyStateView;
    this.etSearch = etSearch;
    this.ivBack = ivBack;
    this.ivClear = ivClear;
    this.loadingProgressBar = loadingProgressBar;
    this.recyclerView = recyclerView;
    this.suggestions = suggestions;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivitySearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivitySearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivitySearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.correct_suggestion;
      TextView correctSuggestion = ViewBindings.findChildViewById(rootView, id);
      if (correctSuggestion == null) {
        break missingId;
      }

      id = R.id.emptyStateDescription;
      TextView emptyStateDescription = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateDescription == null) {
        break missingId;
      }

      id = R.id.emptyStateTitle;
      TextView emptyStateTitle = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateTitle == null) {
        break missingId;
      }

      id = R.id.emptyStateView;
      LinearLayout emptyStateView = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateView == null) {
        break missingId;
      }

      id = R.id.et_search;
      EditText etSearch = ViewBindings.findChildViewById(rootView, id);
      if (etSearch == null) {
        break missingId;
      }

      id = R.id.iv_back;
      ImageView ivBack = ViewBindings.findChildViewById(rootView, id);
      if (ivBack == null) {
        break missingId;
      }

      id = R.id.iv_clear;
      ImageView ivClear = ViewBindings.findChildViewById(rootView, id);
      if (ivClear == null) {
        break missingId;
      }

      id = R.id.loadingProgressBar;
      ProgressBar loadingProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (loadingProgressBar == null) {
        break missingId;
      }

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.suggestions;
      RecyclerView suggestions = ViewBindings.findChildViewById(rootView, id);
      if (suggestions == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivitySearchBinding((RelativeLayout) rootView, appBarLayout, correctSuggestion,
          emptyStateDescription, emptyStateTitle, emptyStateView, etSearch, ivBack, ivClear,
          loadingProgressBar, recyclerView, suggestions, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
